Paragraph, Predicted Class
"- the documentation is part of this repository. Its structure and some
explanations are described here. The documentation, in
particular example-based tutorials, is a great place to start contributing.
The contribution process is also more lightweight, since you can modify
tutorial notebooks without setting up an environment, etc.
We maintain a wishlist of examples to add on
https://github.com/plotly/plotly.py/issues/1965. If you have writing skills,
the wording of existing examples can also be improved in places.", CF � Contribution flow
"First create a new branch for the work you'd like to perform. When naming your branch, please use the following convention: bug-<issue#>-<description> or feature-<issue#>-<description>:", CF � Contribution flow
"Additionally we host an open hangout for any contributor to join at 5pm BST/GMT on a Tuesday to discuss their work, the next week's priorities and to ask questions of other contributors regarding any aspect of the project. Again this is considered a safe space in which there is no such thing as a stupid question.", CF � Contribution flow
"Please ask first before embarking on any significant pull request (e.g.
implementing features, refactoring code, porting to a different language),
otherwise you risk spending a lot of time working on something that the
project's developers might not want to merge into the project.", CF � Contribution flow
"- If you want to contribute design assets or style guide revisions, please open
a GitHub pull request or open a
GitHub issue against the design-kit project.", CF � Contribution flow
"- If your PR changes the behavior of an existing feature, or adds a new feature, please add/edit
the package's documentation.", CF � Contribution flow
"The point of doing all this work in public is to ensure that we are holding ourselves to a high degree of transparency, and so that the community sees that we apply the same processes and hold ourselves to the same quality-bar as we do to community-submitted issues and PRs. We also want to make sure that we expose our team culture and "tribal knowledge" that is inherent in any closely-knit team, which often contains considerable value to those new to the project who are trying to figure out "why the heck does this thing look/work like this???"", CF � Contribution flow
"In general we use GitHub and Git to support our workflow. If you are unfamiliar with those tools then you should check them out until you feel you have a basic understanding of GitHub and a working understanding of Git. Specifically you should understand how forking, branching, committing, PRing and merging works.", CF � Contribution flow
"When the team finds issues we file them in the repo. When we propose new ideas or think-up new features, we file new feature requests. When we work on fixes or features, we create branches and work on those improvements. And when PRs are reviewed, we review in public - including all the good, the bad, and the ugly parts.", CF � Contribution flow
"You can now push to your own fork and submit the pull request. Keep in mind that it's only a good idea to do this if you haven't already submitted a pull request unless you want to create a new one because your origin remote (your fork) will report a discrepancy. Again, please refer to the chapter in Pro Git on rebasing if you're new to it.", CF � Contribution flow
"We have a Medium account at @librariesio and once again it is used to reflect news, events and musings by contributors rather than a direct method of communication. Contributors are encouraged to reference @librariesio in a post when talking about the project, so that we may recommend it if appropriate. Again the account is moderated and protected by the core team.", CF � Contribution flow
"Therefore, to test changes with your app, run rake install to properly
install the gem on your system.", CF � Contribution flow
"Members are encouraged to openly discuss their work, their lives, share views and ask for help using chat. It should be considered a safe space in which there is no such thing as a stupid question. Conversely no one contributor should ever be expected to have read something said in a chat. If someone should know something then it should be written down as an issue and/or documented in an obvious place for others to find.", CF � Contribution flow
"- the plotly.figure_factory module provides Python "recipes" for building
advanced visualizations, such as Gantt charts, annotated heatmaps, etc.
Figure factories are one of the easiest entry points into plotly.py, since
they consist of Python-only code, with standalone, well-separated functions.
However, please note that some of the figure factories become less relevant
as we are introducing more features into plotly.express. Some issues in the
tracker are labeled "figure_factory" and can be good issues to work on. More
instructions on figure factories are found
here.", CF � Contribution flow
"- #events is used to share and discuss events that may be of interest to or attended by members of the community", CF � Contribution flow
"- Create a feature branch with a name that does not exist in any of my branches
(e.g. feature/myfeature or feature-cool_feature).  This is where you
should do your development.  This will allow you to integrate my development
with your own and ease integrating updated code if we're both concurrently
developing.", CF � Contribution flow
"2.  A short, clear justification for why the feature should be added
(e.g., "Lots of people use Gopher, and it doesn't add too much maintenance burden")", CF � Contribution flow
"Steps #2 and #3 above are required because we're using
Lerna. If you have ideas on how to improve that to make
these steps simpler, please don't hesitate to create an issue or submit a PR.", CF � Contribution flow
"Ask for new features in the issues section. Please be as explicit and specific as possible, and keep in mind we're only two persons to actively maintain and work on the project (for free). If relevant and well-described (also, if not too hard), your request will be looked into as fast as we can !", CF � Contribution flow
"If you make some changes to TypeWiz and wish to test them on a Node.js project, you can follow these steps:", CF � Contribution flow
"- Clone your forked repository locally
(git clone https://github.com/<your-github-username>/nltk.git);", CF � Contribution flow
"If you did not write the code, you do not have ownership of the code and you shouldn't submit it to MonoGame.", CF � Contribution flow
"The Grommet community values contributions on the design side of the
project. The Grommet style guide and designer assets are open for
contributions just as the development platform is. You may either submit an
issue on GitHub with a detailed recommendation, or open a pull request
with the updated assets.
Please open a GitHub pull request or open a
GitHub issue against the grommet-design project.", CF � Contribution flow
"Remmina uses the fork and pull model.
If you�d like to make changes to this project, the following steps will get you there!", CF � Contribution flow
"1.  Find some issue you're interested in, or a feature that you'd like to
tackle. Also make sure that no one else is already working on it. If it's a
feature you're requesting, make sure it's aligned with the direction of the
project by creating an issue and discussing it with the core maintainers. We
don't want you to be disappointed.", CF � Contribution flow
"Please take the time and read the following guide from beginning to the end:
https://github.com/yiisoft/yii/wiki/Git-workflow-for-Yii-contributors", CF � Contribution flow
"When writing step-by-step instructions (e.g. how to install something), try to forget everything you know about the topic, and actually follow the instructions you wrote, a single step at time. Often you will discover that there is implicit knowledge that you forgot to mention, or that there are missing or out-of-order steps in the instructions. Bonus points for getting somebody else to follow the steps and watching what they struggle with. Often it would be something very simple that you have not anticipated.", CF � Contribution flow
"PySimpleGUI is different than most projects on GitHub.  It is licensed using the "Open Source License" LGPL3.  However, the coding and development of the project is not "open source".", CF � Contribution flow
"Whenever you make any changes to typewiz and want to test them, simply run yarn build in the typewiz directory again.", CF � Contribution flow
"To make a pull request you will need a GitHub account. For help, see
GitHubforking and pull requests.", CF � Contribution flow
"Before you start to code, we recommend discussing your plans through a GitHub
issue, especially for more ambitious contributions. This gives other
contributors a chance to point you in the right direction, give you feedback on
your design, and help you find out if someone else is working on the same thing.", CF � Contribution flow
"All of the pfSense project source code is on Github. We recommend potential contributors familiarize themselves with the pfSense project git repositories and Github in general.", CF � Contribution flow
"Working on your first Pull Request? You can learn how from this free series How to Contribute to an Open Source Project on GitHub.", CF � Contribution flow
"I enjoy contributions and encourage them!  You should add your code to my
project and make your mark.  [Pick off an issue][issues] or implement a feature
filling your need.  I only make a few simple requests in order to contribute.", CF � Contribution flow
"2.  Create a feature branch for your contribution out of the master branch. Only one contribution per branch is accepted.", CF � Contribution flow
"You can also specify which versions of jQuery you want to test jQuery Mobile with by using the --jqueries option:", CF � Contribution flow
"- We are actively working on providing a seamless TypeScript experience. Don
forget to update corresponding index.d.ts files.", CF � Contribution flow
"Getting the code base running locally requires the bolt command installed globally.  An example is given below.", CF � Contribution flow
"Open an issue! Go to https://github.com/plotly/plotly.py/issues. It's possible that your issue was already addressed. If it wasn't, open it. We also accept pull requests; take a look at the steps below for instructions on how to do this.", CF � Contribution flow
"The easiest and best way to contribute code changes to the project is through pull requests on Github.", CF � Contribution flow
"Google Hangouts is our preferred tool for video chat. We operate an open hangout for anyone to jump into at any time to discuss issues face to face.", CF � Contribution flow
"1.  Fork the repository and create a feature branch. (Existing contributors can create feature branches without forking. Prefix the branch name with @your-github-username/.)", CF � Contribution flow
"- Make sure to add tests for it. This is important so I don't break it in a future version unintentionally. You can also test your version of pronto locally with the help of gem build and gem install.", CF � Contribution flow
"Working on your first Pull Request? You can learn how from this free series
How to Contribute to an Open Source Project on GitHub", CF � Contribution flow
"If your contribution requires significant or breaking changes, or if you plan to propose a major new feature,
we recommend you to create an issue on the GitHub with
a brief proposal and discuss it with us first.", CF � Contribution flow
"Whether you're creating a new guide or adding to an existing one, you can
reference the template guide if you're unsure where to put
things.", CF � Contribution flow
"- Unless your contributions fall under the trivial exemption policy (below), contributors must sign our Contributor License Agreement (CLA) to be eligible to contribute. Read more in section is below.", CF � Contribution flow
"Please ask first before embarking on any significant pull request (e.g.
implementing features, refactoring code), otherwise you risk spending a lot of
time working on something that the project's developers might not want to merge
into the project.", CF � Contribution flow
"- If you are new to contributing code or content to jQuery projects, read the information at contribute.jquery.org first", CF � Contribution flow
"The Windows Terminal team is VERY active in this GitHub Repo. In fact, we live in it all day long and carry out all our development in the open!", CF � Contribution flow
"1.  Fork the main repository.  Click on the 'Fork' button near the top of the page.  This creates a copy of the code under your account on the GitHub server.", CF � Contribution flow

Paragraph, Predicted Class
"- Search through the issues looking
for something that looks interesting to you to pick up. Some issues are marked
"help wanted",
these are typically issues which should be relatively easy to pick up.", CT � Choose a task
"- good first issue: If this is your first time contributing to UserFrosting, look for the good first issue tag. It's associated with easier issues anyone can tackle.", CT � Choose a task
"- Please first discuss the change you wish to make via issue,
email, or any other method with the owners of this repository before making a change.
It might avoid a waste of your time.", CT � Choose a task
"The wiki has details on how to compile Remmina and FreeRDP.
Look for issues labeled �help wanted�. There are also paid bounties available.
Know how to fix a bug or implement anything requested or completely new, but lack the time? Get in touch, We can pay for some hours of your time. Don't be shy.", CT � Choose a task
"Once the team have approved an issue/spec, development can proceed. If no developers are immediately available, the spec can be parked ready for a developer to get started. Parked specs' issues will be labeled "Help Wanted". To find a list of development opportunities waiting for developer involvement, visit the Issues and filter on the Help-Wanted label.", CT � Choose a task
"If you are looking for ways to help, you should start by looking at the Help Wanted tasks.  Please let us know if you plan to work on an issue so that others are not duplicating work.", CT � Choose a task
"Once the team have approved an issue/spec, development can proceed. If no developers are immediately available, the spec can be parked ready for a developer to get started. Parked specs' issues will be labeled "Help Wanted". To find a list of development opportunities waiting for developer involvement, visit the Issues and filter on the Help-Wanted label.", CT � Choose a task
"There are many ways to contribute to plotly.py. It helps to understand first
the structure of the code and of the repository.", CT � Choose a task
"Contributing code or documentation is not the only way to contribute! You can
also contribute to the project by", CT � Choose a task
"- Double-check that the bug is persistent. The site is still in it's infancy and sometimes artifacts may appear and disappear.", CT � Choose a task
"If you want to contribute but do not have a specific topic in mind, review the list of open bug reports and other issues that are in need of attention.", CT � Choose a task
"- up-for-grabs: Theses issues have not yet been assigned to anybody. Look for theses when you want to start working on a new issue.", CT � Choose a task

Paragraph, Predicted Class
"This project adheres to the Contributor Covenant code of conduct. By participating, you are expected to uphold this code. Please file issue to report unacceptable behavior.", TC � Talk to the community
"If you need help or feedback, or want to get more involved in the jQuery Mobile project, don't hesitate to reach out to us. You can find us on IRC in #jqueryui-dev (Freenode).", TC � Talk to the community
"We love contributions from everyone. By participating in this project, you agree
to abide by the thoughtbot Code Of Conduct.", TC � Talk to the community
"We welcome your technical expertise!  But first, please join us in chat to discuss your proposed changes/fixes/enhancements before you get started.  At least one member of our development team will usually be around.", TC � Talk to the community
"Project maintainers have the right and responsibility to remove, edit, or
reject comments, commits, code, wiki edits, issues, and other contributions
that are not aligned to this Code of Conduct, or to ban temporarily or
permanently any contributor for other behaviors that they deem inappropriate,
threatening, offensive, or harmful.", TC � Talk to the community
"- Publishing others' private information, such as a physical or electronic
address, without explicit permission", TC � Talk to the community
"- Ask any questions about how to use Reform in the Trailblazer Gitter Room. Github issues are restricted to bug reports and fixes.", TC � Talk to the community
"Facebook has adopted a Code of Conduct that we expect project
participants to adhere to. Please read the full text
so that you can understand what actions will and will not be tolerated.", TC � Talk to the community
"We have an account on Twitter at @librariesio. This is predominately used to retweet news, events and musings by contributors rather than as a direct method of communication. Contributors are encouraged to use @librariesio in a tweet when talking about the project, so that we may retweet if appropriate. The account is moderated and protected by the core team.", TC � Talk to the community
"We communicate predominately in English. Contributions to the project should be made with English as the first language. We are happy for members of the community to communicate in a language other than English in chat, email and video but be aware that this might be considered exclusive by other members of the community.", TC � Talk to the community
"Facebook has adopted a Code of Conduct that we expect project participants to adhere to. Please read the full text so that you can understand what actions will and will not be tolerated.", TC � Talk to the community
"If you have questions about how to use Karma, please direct these to the Gitter
discussion list or Stack Overflow.", TC � Talk to the community
"This project is a part of the Electron ecosystem. As such, all contributions to this project follow
Electron's code of conduct
where appropriate.", TC � Talk to the community
"Please remember that Marionette is a community-maintained project and, as such,
many of us are working on this in our spare time. If we haven't commented on
your pull request, please be patient. We may be available on our Gitter channel
to discuss further.", TC � Talk to the community
"We specifically discourage the use of the issue tracker on the iperf3
GitHub project page for asking questions.  Questions posted in the
form of issues may go unanswered.  Please use a questions site
such as Stack Overflow
to ask questions of the community or
alternatively use the iperf3 mailing list at
iperf-dev@googlegroups.com (posting requires joining the list).", TC � Talk to the community
"After posting a question on Stack Overflow or in our Forums, please link to it in chat.  This will ensure that more people see it, and provide a place where we can discuss and help clarify your question.", TC � Talk to the community
"We have a Facebook page at @libraries.io. Again this is predominantly used to gather and reflect news, events and musings by contributors rather than as a direct method of communication. Contributors are encouraged to reference Libraries.io in a post when talking about the project, so that we may reflect this if appropriate. Again the account is moderated and protected by the core team.", TC � Talk to the community
"twa's maintainers will be respectful towards you, and you should be respectful towards them
(and towards any other contributors you happen to interact with). Don't assume or demean;
do explain and offer constructive criticism.", TC � Talk to the community
"In the interest of fostering an open and welcoming environment, we as
contributors and maintainers pledge to making participation in our project and
our community a harassment-free experience for everyone, regardless of age, body
size, disability, ethnicity, gender identity and expression, level of experience,
nationality, personal appearance, race, religion, or sexual identity and
orientation.", TC � Talk to the community
"Libraries.io is an open and inclusive community of people working together. We expect contributors to abide by our contributor code of conduct which basically say 'be excellent to each other'. Please report unacceptable behavior to conduct@libraries.io", TC � Talk to the community
"We also have a public Gitter channel and a public Discourse forum where you can discuss SecureDrop and ask questions.", TC � Talk to the community
"We use Slack for chat. There's an open invitation available to anyone who wishes to join the conversation at http://slack.libraries.io.", TC � Talk to the community
"We expect everyone to follow the code of conduct anywhere in thoughtbot's
project codebases, issue trackers, chatrooms, and mailing lists.", TC � Talk to the community
"Be polite. Seriously, even if english is not your native language, try and be respectful. This can be done easily by following this simple steps :", TC � Talk to the community
"Any member of the deployers team are able to redeploy the site. If you require a deployment then you might find one of them in our #general chat channel on Slack.", TC � Talk to the community
"- helping other users on the community forum.
Join the list of nice people helping other
plotly users :-).", TC � Talk to the community

Paragraph, Predicted Class
"iperf3 is officially supported on Linux (various distributions),
FreeBSD, and macOS.  Support may be provided on a best-effort basis to
other UNIX-like platforms.  We cannot provide support for building
and/or running iperf3 on Windows, iOS, or Android.", BW � Build local workspace
"- If you would like to use your development branch in a local project for
testing and debugging purposes, this guide shares steps to
link local projects.", BW � Build local workspace
"3.  You can use docker for testing, by mounting the pacapt.dev script
to the container. See also docker.i section in Makefile. Example:", BW � Build local workspace
"- Install the NodeJS Environment and run npm install, which will add a git hook to format the changed code, and it will run before you run git commit.", BW � Build local workspace
"You can then run yarn start in the root folder to start watching and automatically re-building packages when there are new changes.", BW � Build local workspace
"If you get strange compilation errors, try to remove all node_modules in the project (especially under packages/*).", BW � Build local workspace
"If you wish to make contributions to Libraries.io then you'll need a local version of the site to test. You can find instructions to install the correct Ruby version, Postgres, and to set up the database in our README.", BW � Build local workspace
"- An overview of the components that make up the Libraries.io project and run the https://libraries.io site.", BW � Build local workspace
"There are a few common stumbling blocks that new users face when setting up UserFrosting for the first time.  If you are new to the current version of UserFrosting, please first look at the basic requirements and installation instructions.", BW � Build local workspace
"Below are the details about how to set up the JDT Language Server in different IDEs. Notice: You only need set up it once in any of your preferred IDE.", BW � Build local workspace
"Development on the latest version of Python is preferred. As of this writing it's 3.8.
You can use any operating system. I am using macOS myself and CentOS at work.", BW � Build local workspace
"1.  Install either the patched apk provided by itsMoji here
or manually patch the apk (requires root access)
by following these instructions.", BW � Build local workspace
"4.  Connect to frida and the com.instagram.android process (using an emulator e.g. run frida -U -n com.instagram.android)", BW � Build local workspace
"This will ensure that the installed packages links to your local development
directory, meaning that all changes you make reflect directly in your
environment (don't forget to restart the Jupyter kernel though!). For more
information see the
setuptools
and
pip
documentation on development mode.", BW � Build local workspace
"If you haven't used pipenv before but are comfortable with virtualenvs, just run
pip install pipenv in the virtualenv you're already using and invoke the command above
from the cloned Black repo. It will do the correct thing.", BW � Build local workspace
"Run the following commands in your virtual environment to use the
development version of FigureWidget,", BW � Build local workspace
"This will build and place the binaries under the server folder. Alternately you can download and use the latest snapshot build from Eclipse � JDT Language Server project with the following", BW � Build local workspace
"- for the py-travis-third-party build, it will run tools/travis/third-party.sh to install third-party tools (Stanford NLP tools and CoreNLP and SENNA)", BW � Build local workspace
"# Clone your fork of the repo into the current directory
git clone https://github.com/<your-username>/Google-Play-Music-Desktop-Player-UNOFFICIAL-.git
# Navigate to the newly cloned directory
cd Google-Play-Music-Desktop-Player-UNOFFICIAL-
# Assign the original repo to a remote called "upstream"
git remote add upstream https://github.com/MarshallOfSound/Google-Play-Music-Desktop-Player-UNOFFICIAL-.git", BW � Build local workspace
"You should also try testing your code in a local development environment, to separate code-related issues from server issues.  In general, we recommend that you install a local development server on your computer, rather than testing your code directly on the production server.  This means you can test your code directly on your own computer, making development faster and without the risk of exposing sensitive information to the public.  We recommend installing XAMPP if you don't already have a local server set up.", BW � Build local workspace
"While developing the language server and the extension, you don't need to deploy the server every time to try out changes. Instead you can run the language server out of its Eclipse workspace. Currently we provide two kinds of connection modes between the extension and the language server.", BW � Build local workspace
"If you use IntelliJ IDEA or WebStorm ij-rc-producer is used and you can run tests from an editor (just click on Run green gutter icon).", BW � Build local workspace
"When you're done with your changes use yarn test:fix to run prettier to reformat code and tsc to make sure that there are no compilation errors.", BW � Build local workspace
"? Remember: changes you make may affect both Windows Terminal and Windows Console and may end up being re-incorporated into Windows itself! Because of this, we will treat community PR's with the same level of scrutiny and rigor as commits submitted to the official Windows source by team members and partners.", BW � Build local workspace
"npm i -g bolt
git clone https://github.com/electron-userland/electron-forge
cd electron-forge
# Installs all dependencies, don't run "yarn" or "npm install" yourself
bolt
# Builds all the TS code
bolt build", BW � Build local workspace
"Run yarn install and edit code in the src/ folder of the corresponding
package(s) in packages/. If your contribution is to the docs or the website,
you're looking for the docs/ or the website/ directories, respectively.", BW � Build local workspace
"1)  Please install Eclipse PDE support extension in your VS Code first. The PDE extension's home page provides more usage details about Reload Target Platform, Run JUnit Plug-in Test, Run Eclipse Application.", BW � Build local workspace
"First setup a new virtual environment, see https://docs.python-guide.org/dev/virtualenvs/
Then run tox -e py37.", BW � Build local workspace
"Code formatting is enforced using the Spotless
Gradle plugin. You can use gradle spotlessApply to format new code and add missing
license headers to source files. Formatter and import order settings for Eclipse are
available in the repository under
src/eclipse/junit-eclipse-formatter-settings.xml
and src/eclipse/junit-eclipse.importorder,
respectively. For IntelliJ IDEA there's a
plugin you can use in conjunction with the
Eclipse settings.", BW � Build local workspace
"2.  Clone your fork to your local machine git clone git@github.com:<yourname>/material-ui-pickers.git", BW � Build local workspace
"To build the API documentation, install phpDocumentor globally and then run from the UserFrosting root :", BW � Build local workspace
"4.  Export and install the certificate (Help > SSL Proxying > Install certificate on a Mobile Device or Remote Browser).", BW � Build local workspace
"$ yarn dev
# Open a browser on http://localhost:3000.
# If you change source code, automatically reload your page.", BW � Build local workspace
"*Optional:
You can run faster server builds during development by calling ./node_modules/.bin/gulp dev_server script instead, this will build server binaries that are required by your host OS only. You can also use npm run watch-server which will build and place them on the extension for Java changes. These commands run Maven in offline mode, so you might need to run build-server at least once, to fetch all the dependencies.", BW � Build local workspace
"- Currently, the only proxy able to decrypt TLS  1.3 is Burp 1.7.x
(use version 1.7 although it's outdated, 2.x won't work) with Java 11 or above.", BW � Build local workspace
"# Clone your fork of the repo into the current directory
git clone https://github.com/<your-username>/server-configs-apache.git
# Navigate to the newly cloned directory
cd server-configs-apache
# Assign the original repo to a remote called "upstream"
git remote add upstream https://github.com/h5bp/server-configs-apache", BW � Build local workspace
"- Frontend (Javascript-related) errors: in your browser's Javascript console. See this guide to using your browser console.", BW � Build local workspace
"Because Windows requires Visual Studio libraries to compile some of the optional dependencies, follow these steps to
complete installation and avoid gdal-config errors.", BW � Build local workspace
"- Go to Proxy > External proxy settings..., enable it and forward HTTP and HTTPS to 127.0.0.1:{BURP_PORT}.", BW � Build local workspace

Paragraph, Predicted Class
"Installation gives an overview of the docs, and demonstrates two different ways to use it: either as a simple <script> tag on the page, or as part of a complex JavaScript toolchain.", DC � Deal with the code
"- the codegen (package in packages/python/plotly/codegen): all the code
inside plotly.graph_objects is generated from the plotly javascript API
(the "schema"). The codegen package is where the code generation is done.
Most of the codegen code concerns the generation of docstrings. Traces and
Layout classes have a direct correspondence with their Javascript
counterpart. Additional methods are defined for the Figure object, such as
update_layout, add_trace, etc.", DC � Deal with the code
"- Make sure that your code respects the style conventions of the project. Look at the code around you: do you see
spaces before parenthesis? Are brackets on their own line? Copy that! The most important thing is to be consistent.", DC � Deal with the code
"No need to use namespace when your variable variable is declare locally (set --local) or your file/test file is related to tooling (installer.fish, testing package managers install).", DC � Deal with the code
"- calls tools/travis/coverage-pylint.sh shell script that calls the nltk/nltk/test/runtests.py with coverage and", DC � Deal with the code
"The Marionette coding conventions are provided in the ESLint configuration
included in the repository. Most IDEs and text editors will provide, or allow
for, a plugin for ESLint to read the .eslintrc file.
For areas where the configuration provides no guidance, try to stick to the
conventions in the file you're editing.", DC � Deal with the code
"You MUST follow the PSR-1 and
PSR-2. If you don't know about any of them, you
should really read the recommendations. Can't wait? Use the PHP-CS-Fixer
tool.", DC � Deal with the code
"You can also search for help on Stack Overflow or in our Forums.  In addition to the tags for the components that UF builds upon, such as Slim, Twig, Eloquent, jQuery Validate, Select2, there is now a UserFrosting tag as well.", DC � Deal with the code
"- Otherwise, keep the first letter of the acronym uppercase and use lowercase for the
rest of the acronym -- for example, String defaultUrl;.", DC � Deal with the code
"- One of the philosophies of the project is to keep the code base as small as possible. If you are
adding a new feature, think about whether it is appropriate to go into a separate Node module,
and then be integrated into this project.", DC � Deal with the code
"This project uses Prettier for standard formatting. To
ensure your pull request matches the style guides, run npm run prettier.", DC � Deal with the code
"Publicly available interfaces, classes and methods have a defined lifecycle
which is described in detail in the User Guide.
This process is using the @API annotation from API Guardian.
It also describes the deprecation process followed for API items.", DC � Deal with the code
"2.  Use PACAPT_DEBUG=foo where foo is a package manager
(dpkg, pacman, zypper, ...) to print what pacapt will do.
Use PACAPT_DEBUG=auto for auto-detection;", DC � Deal with the code
"```js{2-4,6}
function hello() {
// these lines
// will get
// highlighted
console.log('hello');
// also this one
console.log('there');
}
```", DC � Deal with the code
"- Name identifiers (variables, classes, functions, module names) with readable
names (x is always wrong);", DC � Deal with the code
"Keep in mind that the first word in twa is "tiny." PRs that add significant complexity,
maintenance burden, or additional dependencies are more likely to be rejected.", DC � Deal with the code
"5.  Run   fscrambler = Module.findExportByName("libstrings.so","_ZN9Scrambler9getStringESs"); Interceptor.attach(ptr(fscrambler), { onLeave: function (retval) { send(Memory.readCString(retval)); } });", DC � Deal with the code
"- Configuration and use of a basic RDP profile, quickly showing the most common controls (resizes, toolbar placement, screenshots,", DC � Deal with the code
"There has been confusion on this point in the past, so we want to make this clear.  It is NEVER ACCEPTABLE to decompile copyrighted assemblies and submit that code to the MonoGame project.", DC � Deal with the code
"- php-ide-serenata : Integrates Serenata as PHP IDE, providing autocompletion, code navigation, refactoring, signature help, linting and annotations.", DC � Deal with the code
"Main Concepts is designed to introduce fundamental concepts in a step-by-step way. Each individual article in Main Concepts builds on the knowledge from the previous ones, so make sure not to add any "cyclical dependencies" between them. It is important that the reader can start with the first article and work their way to the last Main Concepts article without ever having to "look ahead" for a definition. This explains some ordering choices (e.g. that state is explained before events, or that "thinking in React" doesn't use refs). Main Concepts also serves as a reference manual for React concepts, so it is important to be very strict about their definitions and relationships between them. This is, for example, why we introduce elements before components. Resist adding too much detail to Main Concepts articles. They intentionally don't cover all corner cases, and focus on establishing firm foundations.", DC � Deal with the code
"When submitting code, please make every effort to follow existing conventions and style in order to keep the code as readable as possible.", DC � Deal with the code
"- PSR-2 Coding Standard - The easiest way to apply the conventions is to run PHP Code Sniffer as you code.", DC � Deal with the code
"- Do use EditorConfig to enforce our whitespace rules. If your editor is not supported, enforce the settings manually.", DC � Deal with the code
"2)  Open VS Code on the eclipse.jdt.ls folder. The PDE extension will work with Java extension together to automatically load the eclipse.jdt.ls project. Check the status of the language tools on the lower right corner. It should show ready (thumbs up) as the image below.
status indicator", DC � Deal with the code
"The documentation is divided into sections to cater to different learning styles and use cases. When editing an article, try to match the surrounding text in tone and style. When creating a new article, try to match the tone of the other articles in the same section. Learn about the motivation behind each section below.", DC � Deal with the code
"- Start the language server via jdt.ls.socket-stream launch configuration in VS Code or Eclipse
Socket Steam in VS Code", DC � Deal with the code
"Where TOXENV is the environment list you want to use when invoking tox from the command line. Note that the PLOTLY_TOX_* pattern is used to pass in variables for use in the tox.ini file. Though this is a little setup, intensive, you'll get the following benefits:", DC � Deal with the code
"Code reviewers will be expecting to see code that follows Microsoft's C# guidelines. There are a few resources available here and here.", DC � Deal with the code
"If you spot non compliant code in our codebase do not hesitate to flag it or even submit a pull request.
Running npm run lint can help.", DC � Deal with the code
"MQTT and FBNS are currently not implemented in the main library as they're not ready.
You can see the current development here.
They are built using MQTT (v3 and for FBNS a custom implementation of v3) and Thrift
You'll probably have to use a Hex Editor for that.", DC � Deal with the code
"Tutorial is relatively informal, and is designed for people who prefer a hands-on approach to learning, and can tolerate skipping theory in favor of practice. Its goal is to give the reader a feel for a typical React workflow rather than to explain fundamentals in detail. Here we focus on what to do and spend less time on how or why we did it. It is extremely important to do a lot of hand-holding and unambiguously describe every single change. It should be possible for a beginner to mechanically follow every instruction, and still get to a working tic-tac-toe game.", DC � Deal with the code
"PHP-CS-Fixer is automatically loaded by Composer and can be used from the UserFrosting root directory :", DC � Deal with the code
"Please adhere to the coding conventions used throughout a project (indentation,
accurate comments, etc.) and any other requirements.", DC � Deal with the code
"However, some issues/features will require careful thought & formal design before implementation. For these scenarios, we'll request that a spec is written and the associated issue will be labeled Issue-Feature.", DC � Deal with the code
"However, some issues/features will require careful thought & formal design before implementation. For these scenarios, we'll request that a spec is written and the associated issue will be labeled Issue-Feature.", DC � Deal with the code
"- Please use a coding style similar to the rest of the file(s) you change. This isn't a hard rule but if it's too different, it will stand out.", DC � Deal with the code
"class MyComponent extends React.Component {
state = {value: ''};
handleChange = (e) => {
this.setState({value: e.target.value});
};
}", DC � Deal with the code
"The code is formatted using prettier. You can (and should) format your code before committing by running:", DC � Deal with the code
"- the plotly.express package (usually imported as px) is a high-level
functional API. Its code is in packages/python/plotly/express. Most
functions of plotly.express call the internal _make_figure function
in _core.py. More generally, the internals of px consist of general
functions taking care of building the figure (defining subplots, traces
or frames, for example), with special cases for different traces handled
within these functions. There is also subsequent code reuse for px
docstrings, in particular for documenting parameters.", DC � Deal with the code
"We prohibit the use of tools like dotPeek, ILSpy, JustDecompiler, or .NET Reflector which convert compiled assemblies into readable code.", DC � Deal with the code
"1)  Keep patches to Minecraft classes minimal. If you need a lot of things done, you may either add to relevant forge classes or make a new class.", DC � Deal with the code
"PHP-CS-Fixer can be used to automatically fix PHP code styling. UserFrosting provides a project specific configuration file (.php_cs) with a set of rules reflecting our style guidelines. This tool should be used before submitting any code change to assure the style guidelines are met. Every sprinkles will also be parsed by the fixer.", DC � Deal with the code
"Please adhere to the coding conventions used throughout a project (indentation,
accurate comments, etc.) and any other requirements (such as test coverage).", DC � Deal with the code
"Whenever an acronym is included as part of a type name or method name, keep the first
letter of the acronym uppercase and use lowercase for the rest of the acronym. Otherwise,
it becomes impossible to perform camel-cased searches in IDEs, and it becomes
potentially very difficult for mere humans to read or reason about the element without
reading documentation (if documentation even exists).", DC � Deal with the code
"- use shortcuts in if conditions, and always follow with a statements in curly brackets. Do not do:
if (something) return; instead do if (something) { return; }", DC � Deal with the code
"- Name callbacks, when possible try to declare them as functions that can be cached to save memory as well making your code more readable. i.e. instead of", DC � Deal with the code
"Specs help collaborators discuss different approaches to solve a problem, describe how the feature will behave, how the feature will impact the user, what happens if something goes wrong, etc. Driving towards agreement in a spec, before any code is written, often results in simpler code, and less wasted effort in the long run.", DC � Deal with the code
"As a point of consistency, we use soft tabs of four spaces to ensure files render correctly in everyone's environment/diff tools.", DC � Deal with the code
"Specs help collaborators discuss different approaches to solve a problem, describe how the feature will behave, how the feature will impact the user, what happens if something goes wrong, etc. Driving towards agreement in a spec, before any code is written, often results in simpler code, and less wasted effort in the long run.", DC � Deal with the code
"Generally modules should do one focused, specific role well. For example, combining risk control logic with notifications or placing orders outside execution models violates the general programming rule 'separation of concerns'. Keep each module doing one specific task and if you want to consider additional functionality add event handlers that users can bind to from their Algorithm instance.", DC � Deal with the code
"class MyComponent extends React.Component {
constructor(props) {
super(props);
this.handleChange = this.handleChange.bind(this);
this.state = {value: ''};
}
handleChange(e) {
this.setState({value: e.target.value});
}
}", DC � Deal with the code
"It is forbidden to use wildcard imports (e.g., import static org.junit.jupiter.api.Assertions.*;)
in Java code.", DC � Deal with the code
"1.  Use make shellcheck if you have a network connection,
and enough Perl packages (JSON, URI::Escape) on your system;", DC � Deal with the code
"Some tests have annotation @see it('<description>'). It is used for reference to same tests in graphql-js implementation with the same description.", DC � Deal with the code
"Advanced Guides are deep dives into topics that aren't essential for a beginner developer but that everyone bumps into sooner or later. They don't have a specific order, and target more experienced developers. If you have a set of recipes fitting a particular use case, and those recipes aren't opinionated (most React users would agree on them), this is the place to add them.", DC � Deal with the code
"Remember that ES6 is still new to a lot of people. While we use it in many places (const / let, classes, arrow functions), if the equivalent ES5 code is just as straightforward and readable, consider using it.", DC � Deal with the code
"- If the acronym comes at the start of the field or parameter name, use lowercase for the
entire acronym -- for example, String url;.", DC � Deal with the code
"- config (JUL: CONFIG, Log4J: CONFIG): information related to configuration of the system (Example: ServiceLoaderTestEngineRegistry logs IDs of discovered engines)", DC � Deal with the code
"- When manipulating strings, use Python's new-style
formatting
('{} = {}'.format(a, b) instead of '%s = %s' % (a, b));", DC � Deal with the code
"Reference is organized by APIs rather than concepts. It is intended to be exhaustive. Any corner cases or recommendations that were skipped for brevity in Main Concepts or Advanced Guides should be mentioned in the reference documentation for the corresponding APIs.", DC � Deal with the code
"In particular, you should prefer named function declarations over const myFunction = () => ... arrows for top-level functions. However, you should use arrow functions where they provide a tangible improvement (such as preserving this context inside a component). Consider both sides of the tradeoff when deciding whether to use a new feature.", DC � Deal with the code
"- Ensure no coding standards violations - Please run PHP Code Sniffer using the PSR-2 standard before submitting your pull request. A violation will cause the build to fail, so please make sure there are no violations. We can't accept a patch if the build fails.", DC � Deal with the code
"- Put a comment block over your methods, describing what they do, their parameters, and their results.", DC � Deal with the code
"There are many video editors for Linux|GNU. OpenShot is good.
To produce good looking videos choose a 1080p profile.", DC � Deal with the code
"By default production code should be silent unless there is a fatal exception. Because of this, logging or debugging is not allowed inside LEAN framework modules. Additional charting inside the module consumes the resources and should not be included in a module as well.", DC � Deal with the code
"At this point, you should now have a dist/ directory populated with everything you need to use summernote.", DC � Deal with the code

Paragraph, Predicted Class
"- Send coherent history - Make sure each individual commit in your pull request is meaningful. If you had to make multiple intermediate commits while developing, please squash them before submitting.", SC � Submit the changes
"We use Git as our version control
system, so the best way to
contribute is to learn how to use it and put your changes on a Git repository.
There's a plenty of documentation about Git -- you can start with the Pro Git
book.", SC � Submit the changes
"MonoGame has a master branch for stable releases and a develop branch for daily development.  New features and fixes are always submitted to the develop branch.", SC � Submit the changes
"- Only commit changes done in the source files under src, not to the generated builds
which are located in the folders dist and lib.", SC � Submit the changes
"For a better design of your code, we recommend using a technique called
test-driven development,
where you write your tests before writing the actual code that implements
the desired feature.", SC � Submit the changes
"- If you are fixing a bug or typo, improving tests or for any small tweak: the lowest branch where the changes can be applied. Once your Pull Request is accepted, the changes will get merged up to highest branches.", SC � Submit the changes
"###Body
Just as in the subject, use the imperative, present tense: "change" not "changed" nor "changes"
The body should include the motivation for the change and contrast this with previous behavior.", SC � Submit the changes
"Please ensure that all changes are committed using semantic commit messages.
We expose a helper (bolt commit) to make this easier.", SC � Submit the changes
"There is a cookbook with basic instructions on how to build a new fixer. Consider reading it
before opening a PR.", SC � Submit the changes
"If you are stuck in a scenario that fails in your app, but you don't know how to
fix it, submit a failing spec to show the failing scenario. Follow the
guidelines for a pull request submission, but don't worry about fixing the
problem. A failing spec to show that a problem exists is a very very very
helpful pull request for us.", SC � Submit the changes
"- You grant Forge a license to use your code contributed to the primary codebase (everything not under patches) in Forge, under the MinecraftForge license.", SC � Submit the changes
"Please remember that the system is used across a wide range of
platforms, so if you have access to multiple operating systems, please
test on all.", SC � Submit the changes
"- style: Changes that do not affect the meaning of the code (white-space, formatting, missing
semi-colons, etc)", SC � Submit the changes
"The current release or release candidate.  Always numbered as major.minor.revision, possibly with an -alpha, -beta or -RC extension as well. Commits should never be send directly on this branch.", SC � Submit the changes
"The scope could be anything specifying place of the commit change. For example
Compiler, ElementInjector, etc.", SC � Submit the changes
"- Search GitHub for an open or closed PR
that relates to your submission. You don't want to duplicate effort.", SC � Submit the changes
"We try to use principles of GitHub-flow in our branching model. That is the master branch will always be deployable to the live site, and that every branch from that will be used to add a feature, fix a bug, improve something or otherwise represent an atomic unit of work.", SC � Submit the changes
"1.  Changes must be done in /src files, never just the compiled files. Also, don't
commit the compiled files.", SC � Submit the changes
"Before making any submission to the iperf3 project (whether it be code
or documentation), we urge you to consult the iperf3 license, in
particular the section quoted below:", SC � Submit the changes
"If one doesn't already exist, the acceptance tests will generate a dummy
Rails app in test/apps/. On each test run, the dummy app is copied to
test/apps/tmp/ so that any changes won't affect the pre-generated app
(this saves us having to regenerate the app on each run).", SC � Submit the changes
"- Ensure the PR description clearly describes the problem and solution. Include the relevant issue number if applicable.", SC � Submit the changes
"For a PR, we need at least the first 2 items to understand why you are changing
the code. If not, we will ask that you add the necessary information.", SC � Submit the changes
"- When all of the tests are passing and all other conditions described above
satisfied, the PR is ready for review and merge.", SC � Submit the changes
"6.  Finally, go to the web page of your fork of the SAWS repo and click 'Pull Request' to send your changes for review.", SC � Submit the changes
"If you're fixing a bug, add a test. Run it first to confirm it fails, then fix the bug,
run it again to confirm it's really fixed.", SC � Submit the changes
"- Submit a pull request and double-check that the diff doesn't contain any unexpected changes, like special metadata from plugins or themes or unintended inline styles.", SC � Submit the changes
"- How? - Use our JS Bin template which uses latest code on branch "master". Do not replace the links to the the framework CSS and JavaScript: always test with latest code!", SC � Submit the changes
"After your pull request is merged, you can safely delete your branch and pull the changes
from the main (upstream) repository:", SC � Submit the changes
"The Trivial Exemption Policy exempts contributions that would not be sufficiently robust or creative to enjoy copyright protection, and therefore do not need to sign the CLA. This would generally be changes that don't involve much creativity.", SC � Submit the changes
"Pull requests are not being accepted for the project.  This includes sending code changes via other means than "pull requests".  Plainly put, core code you send will not be used.", SC � Submit the changes
"Once a piece of work (in a branch) is complete it should be readied for review. This is your last chance to ensure that your contribution is properly tested. If you are contributing code it is likely your contribution will be rejected if it would lower the test-coverage. Once this is done you can submit a pull-request following the template.", SC � Submit the changes
"TEST_APP_TMP_DIR=/tmp/electron-builder-test ./node_modules/.bin/jest --env jest-environment-node-debug -t 'assisted' '/oneClickInstallerTest\.\w+$'", SC � Submit the changes
"Since our tests cover all the functionality, to prevent tons of errors from showing up and having to parse through a messy output, you'll need to install optional-requirements.txt as explained above.", SC � Submit the changes
"- Set Application Parameters to -t "test name" relative-test-file-name if you want to debug particular test. E.g.", SC � Submit the changes
"- The master branch is basically just a snapshot of the latest stable release. All development should be done in dedicated branches. Do not submit PRs against the master branch.", SC � Submit the changes
"When it's time to integrate changes, our git flow more or less follows http://nvie.com/posts/a-successful-git-branching-model/.", SC � Submit the changes
"If you have an existing local repository, please update it before you start, to minimise the chance of merge conflicts.", SC � Submit the changes
"- Delete the remote branch on GitHub either through the GitHub web UI or your local shell as follows:", SC � Submit the changes
"// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.", SC � Submit the changes
"- Add a test for your change. Only refactoring and documentation changes
require no new tests. If you are adding functionality or fixing a bug,
we need a test!", SC � Submit the changes
"Note that anything after -- is substituted in for {posargs} in the tox.ini. For completeness, because it's reasonably confusing, if you want to force a match for multiple pytest marker tags, you comma-separate the tags like so:", SC � Submit the changes
"If you're interested, this blog post discusses why to use a CLA, and even goes over the text of the CLA we based ours on.", SC � Submit the changes
"If you've already developed a feature, feel free to open a PR. That PR should include
the same information as a feature request would: a short, clear explanation of what the new
feature does, and why it should be added.", SC � Submit the changes
"$ git checkout -b bug-123-short-issue-description
Switched to a new branch 'bug-123-short-issue-description'", SC � Submit the changes
"The scope could be anything specifying place of the commit change. For example app,
gen, docs, gen:view, gen:route, gen:service, etc...", SC � Submit the changes
"To accept the DCO, simply add this line to each commit message with your
name and email address (git commit -s will do this for you):", SC � Submit the changes
"git commit -m "feat(server): awesome new server feature"
git commit -m "docs(package/leon): fix spelling"
git commit -m "chore: split training script into awesome blocks"
git commit -m "style(web app): remove chatbot useless parentheses"", SC � Submit the changes
"- the tools/travis/install.sh installs the pip-req.txt for NLTK and the necessary python packages for CI testing", SC � Submit the changes
"All submissions, including submissions by project members, require review. We
use GitHub pull requests for this purpose. Consult
GitHub Help for more
information on using pull requests.", SC � Submit the changes
"git checkout new-feature
git pull --rebase upstream master
## ... here you may have to resolve some conflicts ... ##", SC � Submit the changes
"- If you are adding functionality or fixing a bug - add a test! Prefer adding new test cases over modifying existing ones.", SC � Submit the changes
"- You grant assign copyright ownership of your contributions to the patches codebase (everything under patches) to Forge, where it will be licensed under the MinecraftForge license.", SC � Submit the changes
"LokiJS puts a strong emphasis on performance. Make sure to benchmark performance on your machine before and after you apply a change and ensure performance is unchanged (or unnoticeable), even better if it is improved.
Verify your changes are non-breaking by running npm test, and if you're adding a feature make sure to add a test somewhere in the relevant file in spec/ (or a brand new file if the test cannot be included in existing files).", SC � Submit the changes
"2.  Write the description of your pull request. Make sure to include a test plan and test your changes.", SC � Submit the changes
"Topic branches are for contributors to develop bug fixes and new features so that they can be easily merged to master. They must follow a few simple rules for consistency:", SC � Submit the changes
"- Authors are responsible for breaking down the PR into sensible commits (with proper commit messages)", SC � Submit the changes
"Please, write commit messages that make
sense,
and rebase your branch
before submitting your Pull Request.", SC � Submit the changes
"Contributions considered trivial are generally fewer than 10 lines of actual code. (It may be longer than 10 lines, for example these would often be larger: blank lines, changes in indentation, formatting, simple comments, logging messages, changes to metadata like Gemfiles or gitignore, reordering, breaking or combining files, renaming files, or other unoriginal changes)", SC � Submit the changes
"# show commits that contain functional code changes (including features, bug fixes, refactorings and improvements)
git log --pretty=format:"%h %ad %s %d" --date=short --grep "^\(feat\|fix\|refactor\|perf\)"", SC � Submit the changes
"- upgrade/[dependency]-upgrade-[version] only use this when upgrading a major internal dependency such as Electron", SC � Submit the changes
"If your change is a bugfix or feature, please make sure you add to
CHANGELOG.md under the "Next Release" heading (add the heading if
needed).", SC � Submit the changes
"This repository uses tests and a linter as automatic tools to maintain the quality of the code.
These two tasks are run locally on your machine before every commit (as a pre-commit git hook). If any test fails or the linter gives an error the commit will not be created. They are also run on
a Travis CI machine when you create a pull request, and the PR will not be merged unless Travis
says all tests and the linting pass.", SC � Submit the changes
"black-primer is used by CI to pull down well-known Black formatted projects and see
if we get source code changes. It will error on formatting changes or errors. Please run
before pushing your PR to see if you get the actions you would expect from Black with
your PR. You may need to change
primer.json
configuration for it to pass.", SC � Submit the changes
"Since these are our guides, we want everyone at thoughtbot to see them. We have
a lot of offices across a lot of timezones, so we leave all PRs open for at
least a week to get feedback from everyone.", SC � Submit the changes
"We utilise Github's review approach. When receiving your pull request, we will
comment inline and provide guidance to help you get your pull request merged
into Marionette. This is not a one-way process and we're more than happy to
discuss the context of your decisions.", SC � Submit the changes
"If you are submitting a pull request, locate or create a corresponding Redmine entry first and provide a link to the issue in the pull request.", SC � Submit the changes
"If you would like to contribute code you can do so through GitHub by forking the repository and sending a pull request targeting the branch master.", SC � Submit the changes
"Finally, tox allows you to pass in additional command line arguments that are formatted in (by us) in the tox.ini file, see {posargs}. This is setup to help with our configuration of pytest markers, which are set up in packages/python/plotly/pytest.ini. To run only tests that are not tagged with nodev, you could use the following command:", SC � Submit the changes
"- It's OK to have multiple small commits as you work on the PR - we will let GitHub automatically squash it before merging.", SC � Submit the changes
"- Make sure your pull request doesn't contain trivial, unwanted changes. For example, if you're working on a big feature
and you happen to open Qt Designer and it increases the height of the window by 1px, please keep that out of the pull request.
In general, keep the number of changes at the minimum necessary.", SC � Submit the changes
"A common issue for many pull requests is inconsistent line endings. You can
learn about dealing with it at:
https://help.github.com/articles/dealing-with-line-endings", SC � Submit the changes
"As part of this repo, we use Husky for git hooks. We leverage the prepush hook to prevent bad commits.", SC � Submit the changes
"A collaborator is someone with write access to the QuantConnect Lean repository. Collaborators merge pull requests from contributors.", SC � Submit the changes
"You should write tests for every feature you add or bug you solve in the code.
Having automated tests for every line of our code let us make big changes
without worries: there will always be tests to verify if the changes introduced
bugs or lack of features. If we don't have tests we will be blind and every
change will come with some fear of possibly breaking something.", SC � Submit the changes
"We appreciate that it may be difficult to offer constructive criticism, but it is a necessary part of ensuring the project is maintainable and successful. If it is difficult to understand something, request it is better documented and/or commented. If you do not feel assured of the robustness of a contribution, request it is better tested. If it is unclear what the goal of the piece of work is and how it relates to the strategy, request a clarification in the corresponding issue. If a pull-request has no corresponding issue, decreases test coverage or otherwise decreases the quality of the project. Reject it. Otherwise, merge it.", SC � Submit the changes
"4.  Get coding! If you've added code, add tests. If you've changed APIs, update
any relevant documentation or tests. Ensure your work is committed within a
feature branch.", SC � Submit the changes
"3.  Run git config commit.template .github/.COMMIT_TEMPLATE (Sets you up with our commit message template)", SC � Submit the changes
"Please update just one issue per PR. If there are multiple issues,
please provide separate PR's one per issue.", SC � Submit the changes
"If you don't want to use reep.io, get in contact at admin@remmina.org.
reep.io is a P2P file-sharing system, meaning there are no servers in the middle.", SC � Submit the changes
"From our store on TEEPUBLIC you can get mugged, your ThinkPad covered and clad in this most compelling T-shirt.", SC � Submit the changes
"1.  The pacapt script is generated from the latest stable branch,
it is there to make installation process simple;", SC � Submit the changes
"- Run all the tests to ensure nothing else was broken. We only take pull requests with passing tests. You can run the tests with rake test.", SC � Submit the changes
"Contains the next bug fix release, typically matching the next revision version.  Any changes not introducing a breaking change can be committed to this branch. Always numbered as major.minor.revision.", SC � Submit the changes
"You generally only need to submit a CLA once, so if you've already submitted one
(even if it was for a different project), you probably don't need to do it
again.", SC � Submit the changes
"You cannot link to a git repo from your Gemfile. Spring doesn't support
this due to the way that it gets loaded (bypassing bundler for
performance reasons).", SC � Submit the changes
"If the commit reverts a previous commit, it should begin with revert: , followed by the header of the reverted commit. In the body it should say: This reverts commit <hash>., where the hash is the SHA of the commit being reverted.", SC � Submit the changes
"Since graphql-js is a reference implementation of the
GraphQL spec, only changes which comply
with this spec will be considered. If you have a change in mind which requires a
change to the spec, please first open an
issue against the spec.", SC � Submit the changes
"where TEST_APP_TMP_DIR is specified to easily inspect and use test build, assisted is the test name and /oneClickInstallerTest\.\w+$ is the path to test file.", SC � Submit the changes
"- tests are found in packages/python/plotly/plotly/tests. Different
directories correspond to different test jobs (with different dependency sets)
run in continuous integration. These jobs are configured in
packages/python/plotly/tox.ini, which itself is used in the Circle CI
configuration file .circleci/config.yml. More is explained about tests
in the following "Technical aspects" section.", SC � Submit the changes
"1.  Fork the WP Test repository, if you haven't already. Otherwise, make sure your fork is up-to-date with the latest from master.", SC � Submit the changes
"- In GitHub, send a pull request to notepadqq:master. Always include an explanation about what your code does and why.", SC � Submit the changes
"IMPORTANT: By submitting a patch, you agree to allow the project
owners to license your work under the terms of the MIT License.", SC � Submit the changes
"Now, whenever you perform a commit, the Black formatter will run.  If the formatter
makes no changes, then the commit will proceed.  But if the formatter does make changes,
then the commit will abort.  To proceed, stage the files that the formatter
modified and commit again.", SC � Submit the changes
"JS Bin instructions: When you start editing the JS Bin, the url will update and contain a new version number. As long as you keep the JS Bin open in your browser this url won't change. Copy the url in your issue report when you are done editing. If your test case requires multiple "single" jQuery Mobile pages, open the JS Bin on multiple tabs on your browser and each of them will get an unique url. Link to this url without "/edit" at the end on your other page(s).", SC � Submit the changes
"Some issues/features may be quick and simple to describe and understand. For such scenarios, once a team member has agreed with your approach, skip ahead to the section headed "Fork, Branch, and Create your PR", below.", SC � Submit the changes
"If adding a new feature, add a test. In fact, always add a test. But wait, before adding
any large feature, first open an issue for us to discuss the idea first.", SC � Submit the changes
"- Create a remote link from your local repository to the
upstream nltk/nltk on GitHub
(git remote add upstream https://github.com/nltk/nltk.git) --
you will need to use this upstream link when updating your local repository
with all the latest contributions.", SC � Submit the changes
"- When submitting a PR, make sure that the commit messages match the AngularJS conventions (see below).", SC � Submit the changes
"- build: Changes that affect the build system, CI configuration or external dependencies (example scopes: gulp, broccoli, npm)", SC � Submit the changes
"Some issues/features may be quick and simple to describe and understand. For such scenarios, once a team member has agreed with your approach, skip ahead to the section headed "Fork, Branch, and Create your PR", below.", SC � Submit the changes
"- Take some time to review the diff of your changes, so that you're confident that everything is correct.", SC � Submit the changes
"All contributed code will be licensed under the MIT license. By submitting a pull-request you are agreeing to publish your code under this license.", SC � Submit the changes
"Marionette has a few guidelines to facilitate your contribution and streamline
the process of getting changes merged in and released.", SC � Submit the changes
"As a general rule, the style and formatting of commit messages should follow the guidelines in
How to Write a Git Commit Message.", SC � Submit the changes
"We accept contributions in "good faith" that it isn't bound to a conflicting license.  By submitting a PR you agree to distribute your work under the MonoGame license and copyright.", SC � Submit the changes
"- Each time a PATCH version number of a Leon package is increased, then the PATCH version number of the projet should also be increased.", SC � Submit the changes
"The v5 (5.x branch) is maintained only for bug fixes, node/edge updates or documentation improvements.", SC � Submit the changes
"- Send coherent history - Make sure each individual commit in your pull request is meaningful. If you had to make multiple intermediate commits while developing, please squash them before submitting.", SC � Submit the changes
"- Test your own work before submitting a pull request.  Most of this project is
bash code so we do not have the luxury of a test driven framework to assist
our development.  Needless to say I will be sure to test it myself before it
ever makes it into a production release.", SC � Submit the changes
"Specs will be managed in a very similar manner as code contributions so please follow the "Fork, Branch and Create your PR" below.", SC � Submit the changes
"When a pull request for code contribution fails testing, the author is
expected to update the pull request to address the failure(s) until it
passes testing and the pull request can merge cleanly.", SC � Submit the changes
"As a contributor you will push your completed local topic branch to origin. As a contributor you will pull your updates from upstream. As a collaborator (write-access) you will merge branches from contributors into upstream.", SC � Submit the changes
"Any line of the commit message cannot be longer 100 characters! This allows the message to be easier
to read on github as well as in various git tools.", SC � Submit the changes
"When making a non-trivial change to this repository (such as adding a new functionality),
please first discuss the change you wish to make via issue before making the change.", SC � Submit the changes
"3.  Create a new topic branch (off the main project development branch) to
contain your feature, change, or fix:
This branch should be in the style", SC � Submit the changes
"The MonoGame project is under the Microsoft Public License except for a few portions of the code.  See the LICENSE.txt file for more details.  Third-party libraries used by MonoGame are under their own licenses.  Please refer to those libraries for details on the license they use.", SC � Submit the changes
"That's why the best way to contribute to WP Test, in it's current form, is to use the WordPress Admin.", SC � Submit the changes
"To publish a new release, run this command (you must have two-factor authentication enabled for npm):", SC � Submit the changes
"You are invited to contribute new features, fixes, or updates
We are always thrilled to receive pull requests, and do our best to process them
as fast as we can.", SC � Submit the changes
"- Commit your changes using a descriptive commit message that follows our
commit message conventions. Adherence to these conventions
is necessary because release notes are automatically generated from these messages.", SC � Submit the changes
"Good pull requests - patches, improvements, new features - are a fantastic
help. They should remain focused in scope and avoid containing unrelated
commits.", SC � Submit the changes
"IMPORTANT: By submitting a patch, you agree to allow the project
owners to license your work under the terms of the MIT License.", SC � Submit the changes
"- Checkout a topic branch from the relevant branch, e.g. develop, and merge back against that branch.", SC � Submit the changes
"Each commit message consists of a header, a body and a footer.  The header has a special
format that includes a type, a scope and a subject:", SC � Submit the changes
"- Commit your changes, preferring one commit per logical unit of work. Often times, this simply means having a single commit.", SC � Submit the changes
"- Please do not bump the version number in your pull requests, the maintainers will do that.
Feel free to indicate whether the changes are a breaking change in behavior.", SC � Submit the changes
"The scope could be anything specifying place of the commit change. For example timer, mainloop, renderer, layout, css, font, widget etc...", SC � Submit the changes
"When you're submitting a bug fix, include spec tests, where applicable, showing
the issue and the resolution. We strive to maintain 100% code coverage in our
testing.", SC � Submit the changes
"- The master branch is actually used as a snapshot of the latest stable release. Do not submit your PRs
against the master branch.", SC � Submit the changes
"Contributions to this project must be accompanied by a Contributor License
Agreement. You (or your employer) retain the copyright to your contribution,
this simply gives us permission to use and redistribute your contributions as
part of the project. Head over to https://cla.developers.google.com/ to see
your current agreements on file or to sign a new one.", SC � Submit the changes
"###Footer
The footer should contain any information about Breaking Changes and is also the place to
reference GitHub issues that this commit Closes.", SC � Submit the changes
"Changes to the learn repository should follow the same logic as the main repository, ie. any changes applied to the hotfix branch should be documented in the learn hotfix branch. This also apply to feature-* branches.", SC � Submit the changes
"Either of those will run every test we've written for the Python API. You can get more granular by running something like:", SC � Submit the changes
"- One pull request is meant to contain just one fix/feature. Open another pull request if you have some other
unrelated change to submit.", SC � Submit the changes
"We have very precise rules over how our git commit messages can be formatted.  This leads to more
readable messages that are easy to follow when looking through the project history.  But also,
we use the git commit messages to generate the change log.", SC � Submit the changes
"Often times when working on a feature or bug fix branch it's useful to pull in the latest from the parent branch. If you're doing this before submitting a pull request it's best to use git's rebase to apply your commits onto the latest from the parent branch. For example, working on new-feature branch where upstream is the remote at git://github.com/jquery/jquery-mobile.git:", SC � Submit the changes
"We have a contributor license agreement (CLA) based off of Google and Apache's CLA. If you would feel comfortable contributing to, say, Angular.js, you should feel comfortable with this CLA.", SC � Submit the changes
"Our Definition of Done
offers some guidelines on what we expect from a pull request.
Feel free to open a pull request that does not fulfill all criteria, e.g. to discuss
a certain change before polishing it, but please be aware that we will only merge it
in case the DoD is met.", SC � Submit the changes
"Contains breaking changes that will need to wait for the next version to be integrated. Typically matched the next minor version. Always numbered as major.minor.x.", SC � Submit the changes
"git remote add upstream git@github.com:mui-org/material-ui-pickers.git
git checkout next
git pull upstream next
git checkout -b my-topic-branch", SC � Submit the changes
"You are under no obligation whatsoever to provide any bug fixes, patches, or
upgrades to the features, functionality or performance of the source code
("Enhancements") to anyone; however, if you choose to make your Enhancements
available either publicly, or directly to Lawrence Berkeley National
Laboratory, without imposing a separate written license agreement for such
Enhancements, then you hereby grant the following license: a non-exclusive,
royalty-free perpetual license to install, use, modify, prepare derivative
works, incorporate into other computer software, distribute, and sublicense
such enhancements or derivative works thereof, in binary and source code form.", SC � Submit the changes
"3.  your feature branch:
For new feature or bug fix, please work on your own branch
and create pull request.
Do not put different ideas on a same branch
because that makes future tracking harder.", SC � Submit the changes
"The command will bump the versions of all packages with changes since the previous release and publish them in the correct order. For each changed package, it will ask, if the changes require a new major version (breaking changes), minor version (new backwards compatible functionality) or just a patch version (backwards compatible bug fixes).", SC � Submit the changes
"This will checkout your local master branch and then merge changes in from the remote upstream branch. We use rebase to reduce noise from merge commits.", SC � Submit the changes
"- Use the WordPress admin to make any WP Test modifications. This goes for any kind of modification, including menus, media data (ie. image captions, alt text, etc.), post, pages, featured images, etc.", SC � Submit the changes
"Please update the 'revision history' and version number at the top of
the code (without this I can't easily do a merge)", SC � Submit the changes
"The footer should contain any information about Breaking Changes and is also the place to
reference GitHub issues that this commit Closes.", SC � Submit the changes
"We have very precise rules over how our git commit messages can be formatted.  This leads to more
readable messages that are easy to follow when looking through the project history.  But also,
we use the git commit messages to generate the LCUI change log.", SC � Submit the changes
"For dev branches, it is also possible to use updateplotlyjsdev --devrepo reponame --devbranch branchname to update to development versions of plotly.js. This will fetch the plotly.js in the CircleCI artifact of the branch branchname of the repo reponame. If --devrepo or --devbranch are omitted, updateplotlyjsdev defaults using plotly/plotly.js and master respectively. For example, to update to a version from a pull request to the plotly/plotly.js repo that is numbered 555, run:", SC � Submit the changes
"- When the server is running breakpoints can be reached and hot code replace can be used to make fixes without restarting the server.", SC � Submit the changes
"To contribute on behalf of your employer, sign the company CLA
To contribute on behalf of yourself, sign the individual CLA", SC � Submit the changes
"After every release, the hotfix branch (and possibly develop, for minor/major releases) should immediately be version-bumped.  That way, new changes can be accumulated until the next release.", SC � Submit the changes
"- Tested: Always include a test plan in pull requests. Do not merge code that doesn't pass all automated tests.", SC � Submit the changes
"- style: Changes that do not affect the meaning of the code (white-space, formatting, missing semi-colons, etc)", SC � Submit the changes
"Please use Stack Overflow or similar. If you subsequently feel that the
documentation is inadequate then please submit a pull request to fix it.", SC � Submit the changes
"To make plotly plots show up in JupyterLab, you also need to install the plotly jupyterlab extensions.", SC � Submit the changes
"If you don't want to use pre-commit, then you can run black manually prior to making
a PR as follows.", SC � Submit the changes
"Specs will be managed in a very similar manner as code contributions so please follow the "Fork, Branch and Create your PR" below.", SC � Submit the changes
"- If you are continuing the work of another person's PR and need to rebase/squash, please retain the
attribution of the original author(s) and continue the work in subsequent commits.", SC � Submit the changes
"- Check every change with git diff before adding them to the index (stage
area) and with git diff --cached before commiting;", SC � Submit the changes
"1.  ng:
The current development branch.
Some pull requests are merged on to this branch,
but the work may not be ready for production.", SC � Submit the changes
"In addition, any commit that is related to an existing issue must reference the issue.
For example, if a commit in a pull request addresses issue #999, it must contain the
following at the bottom of the commit message.", SC � Submit the changes
"3.  Create a new topic branch (off the main project development branch) to
contain your feature, change, or fix:", SC � Submit the changes
"- Ensure tests pass! - Please run the tests before submitting your pull request, and make sure they pass. We won't accept a patch until all tests pass.", SC � Submit the changes
"Now you're ready to send a pull request from this branch to upstream/master and update the GitHub issue tracker to let a collaborator know that your branch is ready to be reviewed and merged.  If extra changes are required as part of the review process, make those changes on the topic branch and re-push. First re-checkout the topic branch you made your original changes on:", SC � Submit the changes
"- Do not commit any generated files, unless already in the repo. If absolutely necessary, explain why.", SC � Submit the changes
"- master in other cases (new feature, deprecation, or backwards compatibility breaking changes). Note that most of the time, master represents the next minor release of PHP CS Fixer, so Pull Requests that break backwards compatibility might be postponed.", SC � Submit the changes
"4.  Commit your changes in logical chunks. If you are making a single feature or single bugfix there should only be
one commit in the PR, if your commit has to include multiple features then you can have one commit per feature.
Before making a PR please squash your commits into these logical chunks", SC � Submit the changes
"- When your feature is ready make a pull request to the development branch.
Pull requests to the master branch will not be accepted.  The master branch is
intended to drive production systems and only stable production-ready commits
will be made to it.", SC � Submit the changes
"export PLOTLY_TOX_PYTHON_27=python2.7
export PLOTLY_TOX_PYTHON_34=python3.4
export TOXENV=py27-core,py34-core", SC � Submit the changes
"- If you are resolving a special issue, add (fix #xxxx[,#xxx]) (#xxxx is the issue id) in your PR title for a better release log, e.g. update entities encoding/decoding (fix #3899).", SC � Submit the changes
"5.  Locally rebase the upstream development branch into your topic branch:
merging upstream master into your branch will be rejected", SC � Submit the changes
"When you'd like the team to take a look, (even if the work is not yet fully-complete), mark the PR as 'Ready For Review' so that the team can review your work and provide comments, suggestions, and request changes. It may take several cycles, but the end result will be solid, testable, conformant code that is safe for us to merge.", SC � Submit the changes
"If you are happy writing in bash, please create a PR for any changes
you'd like to see included (or bug fixes).", SC � Submit the changes
"After performing some work you'll want to merge in changes from the upstream/master. You can use the following two commands in order to assist upstream merging:", SC � Submit the changes
"Get in the habit of pulling in the "upstream" master to stay up to date as jQuery Mobile receives new commits.", SC � Submit the changes
"- Address any comments your reviewer raises, pushing additional commits onto your branch along the way.", SC � Submit the changes
"- style: Changes that do not affect the meaning of the code (white-space, formatting, missing
semi-colons, etc)", SC � Submit the changes
"- Run the full angular-google-maps test suite with npm run build & npm run test and ensure that all tests pass.", SC � Submit the changes
"- Sign the CLA - For us to accept contributions you will have to first have signed the
Contributor License Agreement.", SC � Submit the changes
"- warn (JUL: WARNING, Log4J: WARN): potential usage or configuration errors that should not halt execution", SC � Submit the changes
"The project provides Wallaby.js configuration, you can use it to automatically run the tests in your IDE as you edit the code.", SC � Submit the changes
"- Search GitHub for an open or closed PR
that relates to your submission. You don't want to duplicate effort.", SC � Submit the changes
"7.  Open a Pull Request
with a clear title and description.  Pull Requests are reviewed on http://reviewable.io", SC � Submit the changes
"During alpha/beta/RC, a release candidate always sits on the master branch. During the alpha/beta phase, major changes can still be integrated into master from develop. However, this should bump the revision number instead of the minor/major number. During RC, only hotfixes can be merged into master.", SC � Submit the changes
"4.  Work on this copy on your computer using Git to do the version control. When you're done editing, run the following to record your changes in Git:", SC � Submit the changes
"When committing to a branch be sure to use plain, simple language that describes the incremental changes made on the branch toward the overall goal. Avoid unnecessary complexity. Simplify whenever possible. Assume a reasonable but not comprehensive knowledge of the tools, techniques and context of your work.", SC � Submit the changes
"If you've gone the extra mile and have a patch that fixes the issue, you
should submit a Pull Request!", SC � Submit the changes
"5.  Make your changes, lint, run tests, then push to GitHub with git push --set-upstream origin my-topic-branch.", SC � Submit the changes
"Your video will be uploaded to video streaming services, under the respective Remmina account at each site.
You can add a watermark with the details you want to share, and a caption will be added in the linked video.
Pick a suitable license, like CC-BY-SA 4.0-intl.
Sending an unedited video is fine too.", SC � Submit the changes
"- Create a pull request using the GitHub Web interface (asking us to pull the
changes from your new branch and add to our develop branch);", SC � Submit the changes
"4.  Commit your changes in logical chunks. Please adhere to these git commit
message guidelines
or your code is unlikely to be merged into the main project. Use Git's
interactive rebase
feature to tidy up your commits before making them public.", SC � Submit the changes
"# show commits that contain new features
git log --pretty=format:"%h %ad %s %d" --date=short --grep "^feat"", SC � Submit the changes
"4.  Include a live example. Make use of jsFiddle or jsBin to share your
isolated test cases. Also, a screen capture would work, with tools like LICEcap.", SC � Submit the changes
"After you submit a PR, the MonoGame build server will build your changes and verify all tests pass.  Project maintainers and contributors will review your changes and provide constructive feedback to improve your submission.", SC � Submit the changes
"In order to accept your pull request, we need you to submit a CLA. You only need
to do this once to work on any of Facebook's open source projects.", SC � Submit the changes
"- Please ensure that the test suite passes and that code is lint free before submitting a PR by running:", SC � Submit the changes
"Any line of the commit message cannot be longer 100 characters! This allows the message to be easier
to read on GitHub as well as in various git tools.", SC � Submit the changes
"This repo uses the Black code formatter,
and the pre-commit library to manage a git commit hook to
run Black prior to each commit.  Both pre-commit and black are included in the
packages/python/plotly/optional-requirements.txt file, so you should have them
installed already if you've been following along.", SC � Submit the changes
"- All code in pull requests is assumed to be MIT licensed.  Do not submit a pull request if that isn't the case.", SC � Submit the changes
"Please follow these basic steps to simplify pull request reviews - if you don't you'll probably just be asked to anyway.", SC � Submit the changes
"- Optionally, TEST_APP_TMP_DIR to some directory (e.g. /tmp/electron-builder-test) to inspect output if test uses temporary directory (only if --match is used). Specified directory will be used instead of random temporary directory and cleared on each run.", SC � Submit the changes
"- If you have push access to the main repository, please do not commit directly
to develop: your access should be used only to accept pull requests; if you
want to make a new feature, you should use the same process as other
developers so you code will be reviewed.", SC � Submit the changes
"Once you've made your changes (and hopefully written some tests, see below for more about testing...),
make that pull request!", SC � Submit the changes
"Just as in the subject, use the imperative, present tense: "change" not "changed" nor "changes".
The body should include the motivation for the change and contrast this with previous behavior.", SC � Submit the changes
"Each commit message consists of a header, a body and a footer.  The header has a special
format that includes a type, a scope and a subject:", SC � Submit the changes
"- You assign copyright ownership of your contributions to the patches codebase (everything under patches) to Forge, where it will be licensed under the LGPLv2.1 license.", SC � Submit the changes
"The git fetch upstream command will download the upstream repository to your computer but not merge it. The rebase upstream/master bug-123-short-issue-description command will rebase your changes on top of upstream/master. This will make the review process easier for collaborators.", SC � Submit the changes
"- When submitting a bugfix, write a test that exposes the bug and fails before applying your fix. Submit the test alongside the fix.", SC � Submit the changes
"- PLEASE try keep your PRs focused on a single topic and of a reasonable size or we may ask you to break it up.", SC � Submit the changes
"All pull requests must be accompanied by units tests. If it is a new feature, the tests should highlight expected use cases as well as edge cases, if applicable. If it is a bugfix, there should be tests that expose the bug in question.", SC � Submit the changes
"1/ MUST be be licensed using the Apache License, Version 2.0
2/ authors MAY retain copyright by adding their copyright notice to the appropriate flies", SC � Submit the changes
"Please create a test case for any feature you add or bug you fix. The integration tests are quite simple. You simply need to provide the input TypeScript source code and the expected output (with the added type annotations).", SC � Submit the changes
"The footer should contain any information about Breaking Changes and is also the place to
reference GitHub issues that this commit Closes.", SC � Submit the changes
"Each commit message consists of a header, a body and a footer.  The header has a special
format that includes a type, a scope and a subject:", SC � Submit the changes
"After your pull request is merged, you can safely delete your branch and pull the changes
from the main (upstream) repository:", SC � Submit the changes
"- Maintainers shall use 'rebase and merge' to make sure all commits can apply cleanly onto the master branch", SC � Submit the changes
"Running rake will run all tests. There are both unit tests and
acceptance tests. You can run them individually with rake test:unit or
rake test:acceptance.", SC � Submit the changes
"Before you suggest a new feature or configuration knob, ask yourself why you want it. If
it enables better integration with some workflow, fixes an inconsistency, speeds things
up, and so on - go for it! On the other hand, if your answer is "because I don't like a
particular formatting" then you're not ready to embrace Black yet. Such changes are
unlikely to get accepted. You can still try but prepare to be disappointed.", SC � Submit the changes
"(plotly_dev) $ jupyter nbextension enable --py widgetsnbextension
(plotly_dev) $ jupyter nbextension install --py --symlink --sys-prefix plotlywidget
(plotly_dev) $ jupyter nbextension enable --py --sys-prefix plotlywidget", SC � Submit the changes
"- chore: Changes to the build process or auxiliary tools and libraries such as documentation
generation", SC � Submit the changes
"We use semantic-release, so we have very precise rules over how our git commit messages can be formatted.", SC � Submit the changes
"If you have improvements or bugfixes to make to iperf3, we'd love to
hear from you.  We prefer changes to be submitted in the form of pull
requests on GitHub, although we can (probably) accept simple patches
as well.  If in doubt, ask.", SC � Submit the changes
"- Document any change in behaviour - Make sure the README.md and any other relevant documentation are kept up-to-date.", SC � Submit the changes
"| Types         | Description |
| ------------- |-------------|
| BREAKING      | Changes including breaking changes. |
| build         | New build version. |
| chore         | Changes to the build process or auxiliary tools such as changelog generation. No production code change. |
| docs          | Documentation only changes. |
| feat          | A new feature. |
| fix           | A big fix. |
| perf          | A code change that improves performance. |
| refactor      | A code change that neither fixes a bug nor adds a feature. |
| style         | Changes that do not affect the meaning of the code (white-space, formatting, missing semi-colons, etc.). |
| test          | Adding missing or correcting existing tests. |", SC � Submit the changes
"- #activity contains notifications from the various platforms that we use to keep the Libraries.io project turning. Including notifications from GitHub, Twitter and our servers.", SC � Submit the changes
"When submitting a pull request for review there are a few important steps you have to take to ensure that it gets reviewed quickly and increase the chances that it will be merged:", SC � Submit the changes
"The remote upstream branch links your fork of Lean with our master copy, so when you perform a git pull --rebase you'll be getting updates from our repository.", SC � Submit the changes
"- ci: Any changes to our CI configuration files and scripts (Travis, Circle CI, BrowserStack, SauceLabs)", SC � Submit the changes
"When ready, the branch should be squashed-merged (guide) into develop (or hotfix if it doesn't introduce a breaking change).", SC � Submit the changes
"- Create a new branch off of develop with a descriptive name (for example:
feature/portuguese-sentiment-analysis, hotfix/bug-on-downloader). You can
do it switching to develop branch (git checkout develop) and then
creating a new branch (git checkout -b name-of-the-new-branch);", SC � Submit the changes
"- Do not use verbs in third person form (e.g. use "Discover tests..." instead of "Discovers tests...")
in the first sentence describing a method.", SC � Submit the changes
"Accepted coverage for new contributions is 80%. Any contribution not satisfying this requirement
won't be merged.", SC � Submit the changes
"Everyone is permitted to copy and distribute verbatim copies of this
license document, but changing it is not allowed.", SC � Submit the changes
"Please carefully read this page to make the code review process go as smoothly as possible and to maximize the likelihood of your contribution being merged.", SC � Submit the changes
"Any line of the commit message cannot be longer 74 characters! This allows the message to be easier
to read on GitHub as well as in various git tools.", SC � Submit the changes
"After an issue is created or a pull request is submitted, contributors and/or
maintainers will offer feedback. If the pull request passes review, a maintainer
will accept it with a comment.", SC � Submit the changes
"Don't be afraid to often use highlighting! It is very valuable when you need to focus the reader's attention on a particular detail that's easy to miss.", SC � Submit the changes
"If tests are failing and you don't know why, it might be that the
pre-generated app has become inconsistent in some way. In that case the
best solution is to purge it with rm -rf test/apps/* and then run the
acceptance tests again, which will generate a new app.", SC � Submit the changes
"- Delete the remote branch on GitHub either through the GitHub web UI or your local shell as follows:", SC � Submit the changes
"- Ensure tests pass before making a pull request. (You can read the Testing section below for how to set up your development environment and run tests)", SC � Submit the changes
"Copyright (C) 2004, 2006 The Linux Foundation and its contributors. 660
York Street, Suite 102, San Francisco, CA 94110 USA", SC � Submit the changes
"You can use Chrome, ChromeCanary, Firefox, Opera, Safari, PhantomJS and IE beside PhantomJS.
Once you run yarn test, it will watch all JavaScript file. Therefore karma runs tests every time you change code.", SC � Submit the changes
"- Code coverage and unit-testing is an important process of development.
A pre-commit hook exists which runs the test suite and aborts the commit if
any fail. To manually run tests, you should run yarn test. If you need to
update snapshots then run yarn test-update.", SC � Submit the changes
"Breaking Changes should start with the word BREAKING CHANGE: with a space or two newlines. The rest of the commit message is then used for this.", SC � Submit the changes
"If the commit reverts a previous commit, it should begin with revert: , followed by the header of the reverted commit. In the body it should say: This reverts commit <hash>., where the hash is the SHA of the commit being reverted.", SC � Submit the changes
"Once your code has been reviewed and approved by the requisite number of team members, it will be merged into the master branch. Once merged, your PR will be automatically closed.", SC � Submit the changes
"Please make sure that we are using the next branch for active development. So your branches must be created from next and not from ~~master~~. Here is a short step-by-step guide on how to get started:", SC � Submit the changes
"- Git itself uses the imperative whenever it creates a commit on your behalf, so it makes sense
for you to use it too", SC � Submit the changes
"One may ask you to squash your
commits
too. This is used to "clean" your Pull Request before merging it (we don't want
commits such as fix tests, fix 2, fix 3, etc.).", SC � Submit the changes
"9.  Wait for a maintainer to review your PR, make changes if it's being
recommended, and get it merged.", SC � Submit the changes
"When you'd like the team to take a look, (even if the work is not yet fully-complete), mark the PR as 'Ready For Review' so that the team can review your work and provide comments, suggestions, and request changes. It may take several cycles, but the end result will be solid, testable, conformant code that is safe for us to merge.", SC � Submit the changes
"Good pull requests - patches, improvements, new features - are a fantastic
help. They should remain focused in scope and avoid containing unrelated
commits.", SC � Submit the changes
"Breaking Changes should start with the word BREAKING CHANGE: with a space or two newlines. The rest of the commit message is then used for this.", SC � Submit the changes
"You may also want to take a look at our commit & pull request guide and style guides for instructions on how to maintain your fork and submit your code. Before we can merge any pull request, we'll also need you to sign our contributor license agreement.", SC � Submit the changes
"To release a new version on NPM, first ensure all tests pass with npm test,
then use npm version patch|minor|major in order to increment the version in
package.json and tag and commit a release. Then git push && git push --tags
this change so Travis CI can deploy to NPM. Do not run npm publish directly.
Once published, add release notes.
Use semver to determine which version part to increment.", SC � Submit the changes
"When adding or fixing functionality, tests should be added to help reduce future regressions and breakage. All tests are ran automatically when new commits are pushed to a branch. Pull requests with broken/missing tests are not likely to be merged.", SC � Submit the changes
"- How you made the change is visible in the code and is therefore rarely necessary to include
in the commit body message, but why you made the change is often harder to guess and is
therefore useful to include in the commit body message", SC � Submit the changes
"- Open a pull request that relates to only one subject with a clear title
and description in grammatically correct, complete sentences.", SC � Submit the changes
"Once your code has been reviewed and approved by the requisite number of team members, it will be merged into the master branch. Once merged, your PR will be automatically closed.", SC � Submit the changes
"- You grant Forge a license to use your code contributed to the primary codebase (everything not under patches) in Forge, under the LGPLv2.1 license.", SC � Submit the changes
"- You can test your code locally along with your changes using: yarn storybook or npm run storybook. This will open the storybook in your browser .", SC � Submit the changes
"Therefore, if you do file issues, or create PRs, please keep an eye on your GitHub notifications. If you do not respond to requests for information, your issues/PRs may be closed automatically.", SC � Submit the changes
"New features that introduce some breaking changes or incomplete code should be committed in a separate feature-{name} branch.", SC � Submit the changes
"In order to accept your pull request, we need you to submit a CLA. You only need
to do this once to work on any of Facebook's open source projects.", SC � Submit the changes
"(b) The contribution is based upon previous work that, to the best of my
knowledge, is covered under an appropriate open source license and I
have the right under that license to submit that work with
modifications, whether created in whole or in part by me, under the same
open source license (unless I am permitted to submit under a different
license), as indicated in the file; or", SC � Submit the changes
"This is because the WordPress export produces a pretty messed up export file when it comes to line endings.", SC � Submit the changes
"- Make a note in the CHANGELOG.md file with a brief summary of your change under the heading "Unreleased" at the top of the file. If that heading does not exist, you should add it.", SC � Submit the changes
"git clone https://github.com/nltk/nltk.git
cd nltk
pipenv install -r pip-req.txt
pipenv install tox
tox -e py37", SC � Submit the changes
"Be mindful that if you move some code in an example with highlighting, you also need to update the highlighting.", SC � Submit the changes
"- Do many small commits on that branch locally (git add files-changed,
git commit -m "Add some change");", SC � Submit the changes
"For changes to the website (electronforge.io), please file
issues/pull requests at its separate repository.", SC � Submit the changes
"The MonoGame project follows standard GitHub flow.  You should learn and be familiar with how to use Git, how to create a fork of MonoGame, and how to submit a Pull Request.", SC � Submit the changes
"- Unless it's impractical, please write tests for your changes. This will help us so that we can
spot regressions much easier.", SC � Submit the changes
"NLTK consists of the functionality that the Python/NLP community is motivated to contribute.
Some priority areas for development are listed in the NLTK Wiki", SC � Submit the changes
"Topic branches should exist in your local and origin repositories only. Submitting a pull request will request a merge from your topic branch to our upstream/master branch.", SC � Submit the changes
"By contributing your code, you agree to license your contribution under the terms of the APLv2: https://github.com/JessYanCoding/MVPArms/blob/master/LICENSE", SC � Submit the changes
"Now that you've defined the remote upstream branch, you can refresh your local copy of master with the following commands:", SC � Submit the changes
"karma will run test and keep waiting other test requests. And then, run test:grep in another terminal. Below shows how to run LinkDialog related tests only.", SC � Submit the changes
"By contributing to the project, you agree that your contributions will be licensed
under the LICENSE file in the root directory of this source tree.", SC � Submit the changes
"Just as in the subject, use the imperative, present tense: "change" not "changed" nor "changes".
The body should include the motivation for the change and contrast this with previous behavior.", SC � Submit the changes
"We'll even accept a failing test pasted into the ticket description instead of a
PR. That would at least get us started on creating the failing test in the code.", SC � Submit the changes
"Please make sure to add new type to README (both menu and description). When providing description make sure to leave a resulting type in a comment like:", SC � Submit the changes
"The first of these problems is our focus for Libraries.io. The other two we are trying to tackle at Tidelift.", SC � Submit the changes
"5.  Don't forget to run npm test just right before submitting, it also checks for code styling issues.", SC � Submit the changes
"When you write a new test anywhere under the tests directory, if your PR gets accepted, that test will run in a virtual machine to ensure that future changes don't break your contributions!", SC � Submit the changes
"By contributing to graphql-js, you agree that your contributions will be
licensed under its MIT license.", SC � Submit the changes
"Also, while creating your Pull Request on GitHub, you MUST write a description
which gives the context and/or explains why you are creating it.", SC � Submit the changes
"You'll need to export an environment variable for each tox environment you wish to test with. For example, if you want to test with Python 2.7 and
Python 3.6, but only care to check the core specs, you would need to ensure that the following variables are exported:", SC � Submit the changes

